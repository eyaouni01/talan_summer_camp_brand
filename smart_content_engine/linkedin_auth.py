# ============================================================================
# üìÑ linkedin_auth.py
# ============================================================================
import os
import requests
import webbrowser
from urllib.parse import urlencode, parse_qs, urlparse
from requests_oauthlib import OAuth2Session
import json
from datetime import datetime
import os
from dotenv import load_dotenv  # ‚¨ÖÔ∏è Ajoute √ßa
load_dotenv()  # ‚¨ÖÔ∏è Et √ßa


class LinkedInAuth:
    """
    Gestionnaire d'authentification LinkedIn OAuth2 pour publication r√©elle
    """
    
    def __init__(self):


        self.client_id = os.getenv('LINKEDIN_CLIENT_ID')
        self.client_secret = os.getenv('LINKEDIN_CLIENT_SECRET')
        self.redirect_uri = os.getenv('LINKEDIN_REDIRECT_URI', 'http://localhost:8000/callback')
        print("üîç ID:", self.client_id)
        print("üîç SECRET:", self.client_secret)
        print("üîç REDIRECT_URI:", self.redirect_uri)
        
        # URLs LinkedIn OAuth2
        self.authorization_url = 'https://www.linkedin.com/oauth/v2/authorization'
        self.token_url = 'https://www.linkedin.com/oauth/v2/accessToken'
        
        # Scopes n√©cessaires pour publier
        self.scopes = ['openid', 'profile', 'w_member_social', 'email']
    
    def get_authorization_url(self):
        """G√©n√®re l'URL d'autorisation LinkedIn"""
        params = {
            'response_type': 'code',
            'client_id': self.client_id,
            'redirect_uri': self.redirect_uri,
            'scope': ' '.join(self.scopes),
            'state': 'random_state_string'  # Pour la s√©curit√©
        }
        
        auth_url = f"{self.authorization_url}?{urlencode(params)}"
        return auth_url
    
    def authenticate(self):
        """Lance le processus d'authentification LinkedIn"""
        try:
            print("üîê D√©but de l'authentification LinkedIn...")
            print("üìã √âtapes √† suivre:")
            print("1. Une page web va s'ouvrir")
            print("2. Connectez-vous √† LinkedIn")
            print("3. Autorisez l'application")
            print("4. Copiez l'URL de redirection compl√®te")
            
            # G√©n√©rer et ouvrir l'URL d'autorisation
            auth_url = self.get_authorization_url()
            print(f"\nüåê URL d'autorisation: {auth_url}")
            
            # Ouvrir automatiquement dans le navigateur
            webbrowser.open(auth_url)
            
            # Demander √† l'utilisateur de coller l'URL de retour
            print("\nüìã Apr√®s autorisation, vous serez redirig√© vers une URL.")
            print("‚ö†Ô∏è La page peut afficher une erreur, c'est normal.")
            print("üìã Copiez l'URL compl√®te de la barre d'adresse:")
            
            callback_url = input("\nüîó Collez l'URL de callback ici: ").strip()
            
            # Extraire le code d'autorisation
            parsed_url = urlparse(callback_url)
            query_params = parse_qs(parsed_url.query)
            
            if 'code' not in query_params:
                print("‚ùå Code d'autorisation non trouv√© dans l'URL")
                return None
            
            auth_code = query_params['code'][0]
            print(f"‚úÖ Code d'autorisation r√©cup√©r√©: {auth_code[:10]}...")
            
            # √âchanger le code contre un access token
            access_token = self.exchange_code_for_token(auth_code)
            
            if access_token:
                print("‚úÖ Authentification r√©ussie!")
                print(f"üîë Access Token: {access_token[:20]}...")
                
                # Sauvegarder le token
                self.save_token(access_token)
                return access_token
            else:
                print("‚ùå √âchec de l'obtention du token")
                return None
                
        except Exception as e:
            print(f"‚ùå Erreur lors de l'authentification: {e}")
            return None
    
    def exchange_code_for_token(self, auth_code):
        """√âchange le code d'autorisation contre un access token"""
        try:
            data = {
                'grant_type': 'authorization_code',
                'code': auth_code,
                'redirect_uri': self.redirect_uri,
                'client_id': self.client_id,
                'client_secret': self.client_secret
            }
            
            headers = {
                'Content-Type': 'application/x-www-form-urlencoded'
            }
            
            response = requests.post(self.token_url, data=data, headers=headers)
            
            if response.status_code == 200:
                token_data = response.json()
                return token_data.get('access_token')
            else:
                print(f"‚ùå Erreur token exchange: {response.status_code}")
                print(f"Response: {response.text}")
                return None
                
        except Exception as e:
            print(f"‚ùå Erreur lors de l'√©change: {e}")
            return None
    
    def save_token(self, access_token):
        """Sauvegarde le token dans un fichier s√©curis√©"""
        try:
            token_data = {
                'access_token': access_token,
                'timestamp': str(datetime.now())
            }
            
            with open('.linkedin_token.json', 'w') as f:
                json.dump(token_data, f)
            
            print("üíæ Token sauvegard√© dans .linkedin_token.json")
            print("‚ö†Ô∏è Ajoutez ce token dans votre .env: LINKEDIN_ACCESS_TOKEN")
            
        except Exception as e:
            print(f"‚ùå Erreur sauvegarde token: {e}")
    
    def load_saved_token(self):
        """Charge un token sauvegard√©"""
        try:
            if os.path.exists('.linkedin_token.json'):
                with open('.linkedin_token.json', 'r') as f:
                    token_data = json.load(f)
                return token_data.get('access_token')
        except:
            pass
        return None