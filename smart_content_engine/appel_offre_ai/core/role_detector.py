#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
D√©tecteur de r√¥les bas√© sur l'IA pour analyser les besoins d'un projet
"""

import os
import sys
from pathlib import Path

# Configuration pour Google Generative AI
try:
    import google.generativeai as genai
    from config import MODEL_NAME, GOOGLE_API_KEY
    
    # Configuration de l'API
    genai.configure(api_key=GOOGLE_API_KEY)
    GEMINI_AVAILABLE = True
    
except ImportError:
    print("‚ö†Ô∏è Google Generative AI non disponible")
    GEMINI_AVAILABLE = False
except Exception as e:
    print(f"‚ö†Ô∏è Erreur configuration Gemini: {e}")
    GEMINI_AVAILABLE = False

def load_prompt(path="prompts/generate_roles_prompt.txt"):
    """
    Charge le template de prompt depuis un fichier
    
    Args:
        path (str): Chemin vers le fichier de prompt
        
    Returns:
        str: Template de prompt ou prompt par d√©faut
    """
    try:
        # Essayer le chemin relatif depuis le dossier courant
        if os.path.exists(path):
            with open(path, "r", encoding="utf-8") as f:
                return f.read()
        
        # Essayer depuis le dossier parent
        parent_path = os.path.join("..", path)
        if os.path.exists(parent_path):
            with open(parent_path, "r", encoding="utf-8") as f:
                return f.read()
        
        # Cr√©er le prompt par d√©faut si le fichier n'existe pas
        print(f"‚ö†Ô∏è Fichier prompt non trouv√©: {path}")
        return create_default_prompt()
        
    except Exception as e:
        print(f"‚ùå Erreur lecture prompt: {e}")
        return create_default_prompt()

def create_default_prompt():
    """
    Cr√©e un prompt par d√©faut pour la d√©tection de r√¥les
    
    Returns:
        str: Prompt par d√©faut
    """
    return """
Analysez cette description de projet et identifiez les r√¥les/comp√©tences n√©cessaires pour le mener √† bien.

PROJET √Ä ANALYSER:
{{DESCRIPTION}}

Fournissez une analyse d√©taill√©e incluant:

1. R√îLES TECHNIQUES N√âCESSAIRES:
   - D√©veloppeurs (pr√©cisez les technologies)
   - Data Scientists / Analystes
   - DevOps / Infrastructure
   - Architectes techniques
   - Autres sp√©cialistes techniques

2. R√îLES M√âTIER/GESTION:
   - Product Manager
   - Project Manager
   - Business Analyst
   - UX/UI Designer
   - Autres r√¥les m√©tier

3. COMP√âTENCES TRANSVERSALES:
   - Technologies sp√©cifiques requises
   - Soft skills importantes
   - Certifications ou exp√©riences pr√©f√©r√©es

4. PRIORIT√âS DE RECRUTEMENT:
   - R√¥les critiques √† recruter en premier
   - R√¥les qui peuvent √™tre recrut√©s plus tard
   - Possibilit√©s de polyvalence

Pour chaque r√¥le, indiquez:
- Les responsabilit√©s principales
- Les comp√©tences techniques requises
- Le niveau d'exp√©rience souhait√©
- L'urgence de recrutement (Critique/Important/Souhaitable)

Soyez sp√©cifique et pratique dans vos recommandations.
"""

def detect_roles(description: str) -> str:
    """
    D√©tecte les r√¥les n√©cessaires pour un projet via IA
    
    Args:
        description (str): Description du projet
        
    Returns:
        str: Analyse des r√¥les n√©cessaires
    """
    print("ü§ñ Analyse des r√¥les n√©cessaires...")
    
    try:
        if GEMINI_AVAILABLE:
            return detect_roles_gemini(description)
        else:
            return detect_roles_fallback(description)
            
    except Exception as e:
        print(f"‚ùå Erreur d√©tection r√¥les: {e}")
        return detect_roles_fallback(description)

def detect_roles_gemini(description: str) -> str:
    """
    D√©tection via Google Gemini
    
    Args:
        description (str): Description du projet
        
    Returns:
        str: Analyse des r√¥les
    """
    try:
        # Charger et pr√©parer le prompt
        prompt_template = load_prompt()
        prompt = prompt_template.replace("{{DESCRIPTION}}", description)
        
        # Initialiser le mod√®le
        model = genai.GenerativeModel(MODEL_NAME)
        
        # Configuration de g√©n√©ration
        generation_config = {
            "temperature": 0.7,
            "top_p": 0.8,
            "top_k": 40,
            "max_output_tokens": 2048,
        }
        
        print("üîÑ G√©n√©ration via Gemini...")
        
        # G√©n√©rer la r√©ponse
        response = model.generate_content(
            prompt,
            generation_config=generation_config
        )
        
        if response and response.text:
            print("‚úÖ Analyse g√©n√©r√©e avec succ√®s")
            return response.text.strip()
        else:
            print("‚ö†Ô∏è R√©ponse vide de Gemini")
            return detect_roles_fallback(description)
            
    except Exception as e:
        print(f"‚ùå Erreur Gemini: {e}")
        return detect_roles_fallback(description)

def detect_roles_fallback(description: str) -> str:
    """
    Analyse de fallback bas√©e sur des mots-cl√©s
    
    Args:
        description (str): Description du projet
        
    Returns:
        str: Analyse basique des r√¥les
    """
    print("üîÑ Analyse par mots-cl√©s (fallback)...")
    
    # Analyse par mots-cl√©s
    desc_lower = description.lower()
    
    # D√©tection des technologies/domaines
    tech_keywords = {
        "web": ["web", "site", "application web", "frontend", "backend"],
        "mobile": ["mobile", "app", "android", "ios", "react native"],
        "data": ["data", "donn√©es", "analyse", "machine learning", "ia", "ai", "analytics"],
        "cloud": ["cloud", "aws", "azure", "gcp", "infrastructure", "devops"],
        "design": ["design", "ux", "ui", "interface", "exp√©rience utilisateur"],
        "ecommerce": ["e-commerce", "vente", "boutique", "commande", "paiement"],
        "fintech": ["finance", "fintech", "banque", "paiement", "transaction"],
        "saas": ["saas", "software as a service", "plateforme", "abonnement"]
    }
    
    detected_domains = []
    for domain, keywords in tech_keywords.items():
        if any(keyword in desc_lower for keyword in keywords):
            detected_domains.append(domain)
    
    # G√©n√©ration de l'analyse bas√©e sur les domaines d√©tect√©s
    analysis = f"""
üéØ ANALYSE DU PROJET
Description: {description[:200]}{'...' if len(description) > 200 else ''}

üîç DOMAINES D√âTECT√âS: {', '.join(detected_domains) if detected_domains else 'G√©n√©raliste'}

üìã R√îLES RECOMMAND√âS:

üîß R√îLES TECHNIQUES CRITIQUES:
"""
    
    # Recommandations bas√©es sur les domaines
    if "web" in detected_domains:
        analysis += """
‚Ä¢ D√©veloppeur Full-Stack (React/Vue.js + Python/Node.js)
  - D√©veloppement frontend et backend
  - Int√©gration API et bases de donn√©es
  - Urgence: CRITIQUE

‚Ä¢ D√©veloppeur Frontend (React/Vue.js)
  - Interface utilisateur responsive
  - Exp√©rience utilisateur optimis√©e
  - Urgence: IMPORTANT
"""
    
    if "mobile" in detected_domains:
        analysis += """
‚Ä¢ D√©veloppeur Mobile (React Native/Flutter)
  - Applications iOS et Android
  - Int√©gration services natifs
  - Urgence: IMPORTANT
"""
    
    if "data" in detected_domains:
        analysis += """
‚Ä¢ Data Scientist / Analyst
  - Analyse de donn√©es et ML
  - Python, SQL, frameworks ML
  - Urgence: CRITIQUE

‚Ä¢ Data Engineer
  - Pipeline de donn√©es
  - ETL et infrastructure data
  - Urgence: IMPORTANT
"""
    
    if "cloud" in detected_domains or "devops" in desc_lower:
        analysis += """
‚Ä¢ DevOps Engineer
  - Infrastructure cloud (AWS/Azure/GCP)
  - CI/CD et automatisation
  - Urgence: IMPORTANT
"""
    
    # R√¥les m√©tier universels
    analysis += """

üë• R√îLES M√âTIER ESSENTIELS:

‚Ä¢ Product Manager
  - Vision produit et roadmap
  - Coordination des √©quipes
  - Urgence: CRITIQUE

‚Ä¢ UX/UI Designer
  - Design d'interface et exp√©rience
  - Prototypage et tests utilisateurs
  - Urgence: IMPORTANT

‚Ä¢ Project Manager / Scrum Master
  - Gestion de projet agile
  - Coordination et planning
  - Urgence: SOUHAITABLE

üéØ COMP√âTENCES TRANSVERSALES RECHERCH√âES:
‚Ä¢ Exp√©rience en m√©thodologies agiles
‚Ä¢ Esprit d'√©quipe et communication
‚Ä¢ Capacit√© d'adaptation et d'innovation
‚Ä¢ Orientation r√©sultats

üìà PLAN DE RECRUTEMENT SUGG√âR√â:
1. PHASE 1 (Critique): Product Manager, D√©veloppeur principal
2. PHASE 2 (Important): Designer, D√©veloppeur compl√©mentaire
3. PHASE 3 (Souhaitable): DevOps, R√¥les sp√©cialis√©s
"""
    
    return analysis

def create_prompt_file():
    """
    Cr√©e le fichier de prompt par d√©faut s'il n'existe pas
    """
    prompt_dir = "prompts"
    prompt_file = os.path.join(prompt_dir, "generate_roles_prompt.txt")
    
    if not os.path.exists(prompt_file):
        os.makedirs(prompt_dir, exist_ok=True)
        
        with open(prompt_file, "w", encoding="utf-8") as f:
            f.write(create_default_prompt())
        
        print(f"üìÅ Fichier prompt cr√©√©: {prompt_file}")

def test_role_detection():
    """
    Teste la d√©tection de r√¥les avec diff√©rents exemples
    """
    print("üß™ === TEST D√âTECTION DE R√îLES ===")
    
    test_projects = [
        {
            "name": "E-commerce avec IA",
            "description": "D√©veloppement d'une plateforme e-commerce avec syst√®me de recommandation par intelligence artificielle, interface mobile et web, paiements s√©curis√©s et analytics avanc√©s."
        },
        {
            "name": "App Fintech Mobile",
            "description": "Application mobile de gestion financi√®re personnelle avec budgeting automatique, investissements, et tableau de bord en temps r√©el."
        },
        {
            "name": "Plateforme SaaS B2B",
            "description": "Plateforme SaaS pour la gestion de projets d'√©quipes distribu√©es avec collaboration en temps r√©el, int√©grations multiples et dashboard analytique."
        }
    ]
    
    for i, project in enumerate(test_projects, 1):
        print(f"\nüìù Test {i}/{len(test_projects)}: {project['name']}")
        print(f"üìã Description: {project['description']}")
        
        try:
            roles = detect_roles(project['description'])
            print(f"‚úÖ Analyse g√©n√©r√©e ({len(roles)} caract√®res)")
            print(f"üìä Aper√ßu: {roles[:200]}...")
            
        except Exception as e:
            print(f"‚ùå Erreur pour {project['name']}: {e}")
    
    print("\nüèÅ Tests termin√©s")

# Initialisation
def initialize_role_detector():
    """
    Initialise le d√©tecteur de r√¥les
    """
    print("üîß Initialisation du d√©tecteur de r√¥les...")
    
    # Cr√©er le fichier de prompt si n√©cessaire
    create_prompt_file()
    
    # V√©rifier la configuration
    if GEMINI_AVAILABLE:
        print("‚úÖ Google Gemini configur√©")
    else:
        print("‚ö†Ô∏è Mode fallback (analyse par mots-cl√©s)")
    
    print("‚úîÔ∏è D√©tecteur de r√¥les pr√™t")

if __name__ == "__main__":
    initialize_role_detector()
    test_role_detection()