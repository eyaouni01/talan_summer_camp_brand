#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Interface Streamlit pour la g√©n√©ration et publication d'offres d'emploi LinkedIn
"""

import streamlit as st
import os
import sys
import json
import time
from pathlib import Path
from datetime import datetime

# Ajout du chemin parent pour les imports (√† adapter selon votre structure)
sys.path.append(str(Path(__file__).parent.parent))

# Imports de vos modules (√† adapter selon votre structure)
try:
    from core.offer_creator import OfferCreator
    from core.linkedin_publisher import LinkedInPublisher
    from core.role_detector import detect_roles
except ImportError:
    st.error("‚ö†Ô∏è Modules core non trouv√©s. V√©rifiez la structure de votre projet.")
    st.stop()

# Configuration de la page Streamlit
st.set_page_config(
    page_title="G√©n√©rateur d'Offres LinkedIn",
    page_icon="üöÄ",
    layout="wide",
    initial_sidebar_state="expanded"
)

# CSS personnalis√© optimis√© pour le mode clair
st.markdown("""
<style>
    /* Force le mode clair */
    .stApp {
        background-color: #ffffff;
        color: #262730;
    }
    
    /* Header principal */
    .main-header {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        padding: 2rem;
        border-radius: 15px;
        color: white;
        text-align: center;
        margin-bottom: 2rem;
        box-shadow: 0 4px 20px rgba(102, 126, 234, 0.3);
    }
    
    /* Cards des √©tapes - mode clair */
    .step-card {
        background: linear-gradient(135deg, #ffffff 0%, #f8f9ff 100%);
        padding: 1.5rem;
        border-radius: 12px;
        border: 2px solid #e3e8ff;
        border-left: 5px solid #667eea;
        margin-bottom: 1rem;
        box-shadow: 0 2px 10px rgba(102, 126, 234, 0.1);
        color: #262730;
    }
    
    /* Cards de succ√®s - mode clair */
    .success-card {
        background: linear-gradient(135deg, #f0fff4 0%, #dcfce7 100%);
        padding: 1rem;
        border-radius: 10px;
        border: 1px solid #bbf7d0;
        border-left: 4px solid #22c55e;
        margin: 0.5rem 0;
        color: #166534;
        box-shadow: 0 2px 8px rgba(34, 197, 94, 0.1);
    }
    
    /* Cards d'avertissement - mode clair */
    .warning-card {
        background: linear-gradient(135deg, #fffbeb 0%, #fef3c7 100%);
        padding: 1rem;
        border-radius: 10px;
        border: 1px solid #fed7aa;
        border-left: 4px solid #f59e0b;
        margin: 0.5rem 0;
        color: #92400e;
        box-shadow: 0 2px 8px rgba(245, 158, 11, 0.1);
    }
    
    /* Cards d'erreur - mode clair */
    .error-card {
        background: linear-gradient(135deg, #fef2f2 0%, #fecaca 100%);
        padding: 1rem;
        border-radius: 10px;
        border: 1px solid #fca5a5;
        border-left: 4px solid #ef4444;
        margin: 0.5rem 0;
        color: #991b1b;
        box-shadow: 0 2px 8px rgba(239, 68, 68, 0.1);
    }
    
    /* Barre de progression */
    .stProgress > div > div > div > div {
        background: linear-gradient(90deg, #667eea 0%, #764ba2 100%);
    }
    
    /* Sidebar en mode clair */
    .css-1d391kg {
        background-color: #f8f9ff;
    }
    
    /* Boutons personnalis√©s */
    .stButton > button {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        border: none;
        border-radius: 8px;
        padding: 0.5rem 1rem;
        font-weight: 500;
        transition: all 0.3s ease;
        box-shadow: 0 2px 8px rgba(102, 126, 234, 0.3);
    }
    
    .stButton > button:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 15px rgba(102, 126, 234, 0.4);
    }
    
    /* Input fields en mode clair */
    .stTextInput > div > div > input,
    .stTextArea > div > div > textarea {
        background-color: #ffffff;
        border: 2px solid #e3e8ff;
        color: #262730;
        border-radius: 8px;
    }
    
    .stTextInput > div > div > input:focus,
    .stTextArea > div > div > textarea:focus {
        border-color: #667eea;
        box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
    }
    
    /* Expanders en mode clair */
    .streamlit-expanderHeader {
        background-color: #f8f9ff;
        color: #262730;
        border: 1px solid #e3e8ff;
    }
    
    /* M√©triques et info boxes */
    .metric-card {
        background: linear-gradient(135deg, #ffffff 0%, #f0f4ff 100%);
        padding: 1rem;
        border-radius: 10px;
        border: 1px solid #e3e8ff;
        text-align: center;
        box-shadow: 0 2px 10px rgba(102, 126, 234, 0.05);
    }
</style>
""", unsafe_allow_html=True)

class StreamlitJobOfferApp:
    def __init__(self):
        """Initialise l'application Streamlit"""
        self.output_dir = "generated_offers"
        self.config_file = "config/linkedin_config.json"
        
        # Cr√©er les dossiers n√©cessaires
        os.makedirs(self.output_dir, exist_ok=True)
        os.makedirs("config", exist_ok=True)
        os.makedirs("data/posted_content", exist_ok=True)
        
        # Initialiser les objets core
        if 'offer_creator' not in st.session_state:
            st.session_state.offer_creator = OfferCreator()
        if 'linkedin_publisher' not in st.session_state:
            st.session_state.linkedin_publisher = LinkedInPublisher()
    
    def load_linkedin_config(self):
        """Charge la configuration LinkedIn"""
        try:
            if os.path.exists(self.config_file):
                with open(self.config_file, 'r', encoding='utf-8') as f:
                    return json.load(f)
            return None
        except Exception as e:
            st.error(f"Erreur lecture config: {e}")
            return None
    
    def save_linkedin_config(self, token):
        """Sauvegarde la configuration LinkedIn"""
        config = {
            "access_token": token,
            "created_at": datetime.now().isoformat(),
            "scopes": ["w_member_social", "r_liteprofile"]
        }
        
        try:
            with open(self.config_file, 'w', encoding='utf-8') as f:
                json.dump(config, f, indent=2, ensure_ascii=False)
            return True
        except Exception as e:
            st.error(f"Erreur sauvegarde config: {e}")
            return False
    
    def render_header(self):
        """Affiche l'en-t√™te de l'application"""
        st.markdown("""
        <div class="main-header">
            <h1>üöÄ G√©n√©rateur d'Offres d'Emploi LinkedIn</h1>
            <p>Analysez votre projet ‚Ä¢ D√©tectez les profils ‚Ä¢ G√©n√©rez et publiez vos offres</p>
        </div>
        """, unsafe_allow_html=True)
    
    def render_sidebar_config(self):
        """Affiche la configuration LinkedIn dans la sidebar"""
        st.sidebar.header("‚öôÔ∏è Configuration LinkedIn")
        
        config = self.load_linkedin_config()
        
        if config and config.get('access_token'):
            st.sidebar.success("‚úÖ Token LinkedIn configur√©")
            st.sidebar.write(f"üìÖ Cr√©√© le : {config.get('created_at', 'N/A')[:10]}")
            
            if st.sidebar.button("üîÑ Renouveler le token"):
                if os.path.exists(self.config_file):
                    os.remove(self.config_file)
                st.experimental_rerun()
        else:
            st.sidebar.warning("‚ö†Ô∏è Token LinkedIn requis")
            
            with st.sidebar.expander("üìò Comment obtenir un token"):
                st.write("""
                1. Allez sur https://developer.linkedin.com/
                2. Cr√©ez une application
                3. Obtenez votre access_token avec les scopes :
                   - w_member_social
                   - r_liteprofile
                """)
            
            token = st.sidebar.text_input(
                "üîë Access Token LinkedIn",
                type="password",
                placeholder="Entrez votre token..."
            )
            
            if st.sidebar.button("üíæ Sauvegarder"):
                if token:
                    if self.save_linkedin_config(token):
                        st.sidebar.success("‚úÖ Token sauvegard√© !")
                        st.experimental_rerun()
                else:
                    st.sidebar.error("‚ùå Token requis")
    
    def step_1_project_analysis(self):
        """√âtape 1: Analyse du projet"""
        st.markdown('<div class="step-card">', unsafe_allow_html=True)
        st.header("üìä √âtape 1: Analyse du Projet")
        
        st.write("D√©crivez votre projet en d√©tail pour une d√©tection optimale des profils n√©cessaires.")
        
        project_description = st.text_area(
            "üìù Description du projet",
            placeholder="Ex: D√©veloppement d'une plateforme e-commerce avec IA pour la recommandation personnalis√©e, utilisant React, Python, AWS...",
            height=150,
            key="project_description"
        )
        
        col1, col2 = st.columns([1, 2])
        
        with col1:
            analyze_btn = st.button("üîç Analyser le projet", type="primary")
        
        if analyze_btn and project_description:
            with st.spinner("ü§ñ Analyse en cours..."):
                try:
                    detected_roles = detect_roles(project_description)
                    st.session_state.project_description = project_description
                    st.session_state.detected_roles = detected_roles
                    st.session_state.step_1_complete = True
                    
                    st.markdown('<div class="success-card">', unsafe_allow_html=True)
                    st.success("‚úÖ Analyse termin√©e avec succ√®s !")
                    st.markdown('</div>', unsafe_allow_html=True)
                    
                except Exception as e:
                    st.error(f"‚ùå Erreur lors de l'analyse : {e}")
                    # Utiliser des r√¥les par d√©faut
                    default_roles = """
R√¥les recommand√©s pour ce projet :
1. Data Scientist - Analyse et mod√©lisation des donn√©es
2. D√©veloppeur Full-Stack - D√©veloppement de la plateforme  
3. DevOps Engineer - Infrastructure et d√©ploiement
4. Product Manager - Gestion de produit et strat√©gie
                    """
                    st.session_state.detected_roles = default_roles
                    st.session_state.step_1_complete = True
        
        elif analyze_btn and not project_description:
            st.error("‚ùå Veuillez d√©crire votre projet")
        
        # Afficher les r√©sultats si disponibles
        if hasattr(st.session_state, 'detected_roles'):
            st.subheader("üéØ Profils d√©tect√©s")
            st.write(st.session_state.detected_roles)
        
        st.markdown('</div>', unsafe_allow_html=True)
        
        return hasattr(st.session_state, 'step_1_complete')
    
    def step_2_role_selection(self):
        """√âtape 2: S√©lection des r√¥les"""
        if not hasattr(st.session_state, 'step_1_complete'):
            st.info("üëÜ Compl√©tez d'abord l'analyse du projet")
            return False
        
        st.markdown('<div class="step-card">', unsafe_allow_html=True)
        st.header("üë• √âtape 2: S√©lection des Profils √† Recruter")
        
        st.write("S√©lectionnez les profils pour lesquels vous souhaitez g√©n√©rer des offres d'emploi.")
        
        # Afficher les r√¥les d√©tect√©s comme r√©f√©rence
        with st.expander("üìã R√¥les sugg√©r√©s par l'IA"):
            st.write(st.session_state.detected_roles)
        
        # Interface pour saisir les r√¥les
        col1, col2 = st.columns([2, 1])
        
        with col1:
            # Initialiser la liste des r√¥les s√©lectionn√©s
            if 'selected_roles' not in st.session_state:
                st.session_state.selected_roles = []
            
            new_role = st.text_input(
                "‚úèÔ∏è Ajouter un r√¥le",
                placeholder="Ex: Data Scientist",
                key="new_role_input"
            )
            
            if st.button("‚ûï Ajouter") and new_role:
                if new_role not in st.session_state.selected_roles:
                    st.session_state.selected_roles.append(new_role)
                    st.success(f"‚úÖ Ajout√©: {new_role}")
                    # Clear input
                    st.session_state.new_role_input = ""
                else:
                    st.warning("‚ö†Ô∏è R√¥le d√©j√† ajout√©")
        
        with col2:
            # Suggestions rapides
            st.write("**Suggestions rapides:**")
            quick_roles = [
                "Data Scientist",
                "D√©veloppeur Full-Stack", 
                "DevOps Engineer",
                "Product Manager",
                "UI/UX Designer"
            ]
            
            for role in quick_roles:
                if st.button(f"+ {role}", key=f"quick_{role}"):
                    if role not in st.session_state.selected_roles:
                        st.session_state.selected_roles.append(role)
        
        # Afficher les r√¥les s√©lectionn√©s
        if st.session_state.selected_roles:
            st.subheader("üìä R√¥les s√©lectionn√©s:")
            
            for i, role in enumerate(st.session_state.selected_roles):
                col_role, col_remove = st.columns([3, 1])
                with col_role:
                    st.write(f"**{i+1}.** {role}")
                with col_remove:
                    if st.button("üóëÔ∏è", key=f"remove_{i}"):
                        st.session_state.selected_roles.remove(role)
                        st.experimental_rerun()
            
            st.session_state.step_2_complete = True
        else:
            st.info("‚ÑπÔ∏è Aucun r√¥le s√©lectionn√©")
        
        st.markdown('</div>', unsafe_allow_html=True)
        
        return len(st.session_state.selected_roles) > 0
    
    def step_3_offer_generation(self):
        """√âtape 3: G√©n√©ration des offres"""
        if not hasattr(st.session_state, 'step_2_complete'):
            st.info("üëÜ S√©lectionnez d'abord les r√¥les √† recruter")
            return False
        
        st.markdown('<div class="step-card">', unsafe_allow_html=True)
        st.header("üé® √âtape 3: G√©n√©ration des Offres")
        
        st.write(f"G√©n√©ration d'offres pour {len(st.session_state.selected_roles)} r√¥le(s) s√©lectionn√©(s).")
        
        if st.button("üöÄ G√©n√©rer les offres", type="primary"):
            progress_bar = st.progress(0)
            status_text = st.empty()
            
            generated_offers = []
            
            for i, role in enumerate(st.session_state.selected_roles):
                progress = (i + 1) / len(st.session_state.selected_roles)
                progress_bar.progress(progress)
                status_text.text(f"üîÑ G√©n√©ration pour {role}...")
                
                try:
                    offer = st.session_state.offer_creator.create_offer(
                        role, 
                        st.session_state.project_description, 
                        self.output_dir
                    )
                    
                    if offer and os.path.exists(offer.get('image', '')):
                        generated_offers.append(offer)
                        st.success(f"‚úÖ Offre g√©n√©r√©e pour {role}")
                    else:
                        st.error(f"‚ùå Erreur g√©n√©ration pour {role}")
                        
                except Exception as e:
                    st.error(f"‚ùå Erreur pour {role}: {e}")
                
                time.sleep(1)  # Pause pour l'UX
            
            progress_bar.progress(1.0)
            status_text.text(f"‚úÖ G√©n√©ration termin√©e: {len(generated_offers)} offres cr√©√©es")
            
            st.session_state.generated_offers = generated_offers
            st.session_state.step_3_complete = True
            
            # Afficher les r√©sultats
            if generated_offers:
                st.subheader("üìã Offres g√©n√©r√©es:")
                
                for offer in generated_offers:
                    with st.expander(f"üìÑ {offer['role']}"):
                        col1, col2 = st.columns([2, 1])
                        
                        with col1:
                            st.write("**Texte de l'offre:**")
                            st.write(offer['text'][:200] + "...")
                        
                        with col2:
                            if os.path.exists(offer['image']):
                                st.image(offer['image'], caption=f"Image pour {offer['role']}")
                            else:
                                st.write("‚ö†Ô∏è Image non disponible")
        
        st.markdown('</div>', unsafe_allow_html=True)
        
        return hasattr(st.session_state, 'step_3_complete')
    
    def step_4_linkedin_publishing(self):
        """√âtape 4: Publication sur LinkedIn"""
        if not hasattr(st.session_state, 'step_3_complete'):
            st.info("üëÜ G√©n√©rez d'abord les offres d'emploi")
            return
        
        st.markdown('<div class="step-card">', unsafe_allow_html=True)
        st.header("üì§ √âtape 4: Publication sur LinkedIn")
        
        config = self.load_linkedin_config()
        
        if not config or not config.get('access_token'):
            st.markdown('<div class="warning-card">', unsafe_allow_html=True)
            st.warning("‚ö†Ô∏è Token LinkedIn requis. Configurez-le dans la barre lat√©rale.")
            st.markdown('</div>', unsafe_allow_html=True)
            st.markdown('</div>', unsafe_allow_html=True)
            return
        
        offers = st.session_state.get('generated_offers', [])
        
        if not offers:
            st.error("‚ùå Aucune offre g√©n√©r√©e √† publier")
            st.markdown('</div>', unsafe_allow_html=True)
            return
        
        st.write(f"Pr√™t √† publier {len(offers)} offre(s) sur LinkedIn.")
        
        # S√©lection des offres √† publier
        st.subheader("üìã S√©lectionnez les offres √† publier:")
        
        offers_to_publish = []
        for i, offer in enumerate(offers):
            if st.checkbox(f"üìÑ {offer['role']}", value=True, key=f"publish_{i}"):
                offers_to_publish.append(offer)
        
        if offers_to_publish:
            col1, col2 = st.columns([1, 1])
            
            with col1:
                if st.button("üöÄ Publier sur LinkedIn", type="primary"):
                    self.publish_offers_to_linkedin(offers_to_publish, config['access_token'])
            
            with col2:
                st.info(f"üìä {len(offers_to_publish)} offre(s) s√©lectionn√©e(s)")
        
        st.markdown('</div>', unsafe_allow_html=True)
    
    def publish_offers_to_linkedin(self, offers, access_token):
        """Publie les offres s√©lectionn√©es sur LinkedIn"""
        st.subheader("üì§ Publication en cours...")
        
        progress_bar = st.progress(0)
        status_text = st.empty()
        published_count = 0
        
        for i, offer in enumerate(offers):
            progress = (i + 1) / len(offers)
            progress_bar.progress(progress)
            status_text.text(f"üì§ Publication de {offer['role']}...")
            
            try:
                result = st.session_state.linkedin_publisher.post_content_with_image(
                    content=offer['text'],
                    access_token=access_token,
                    image_path=offer['image']
                )
                
                if result and result.get('status') == 'success':
                    published_count += 1
                    st.success(f"‚úÖ {offer['role']} publi√© avec succ√®s")
                    if result.get('post_url'):
                        st.write(f"üîó [Voir le post]({result['post_url']})")
                else:
                    st.error(f"‚ùå √âchec publication pour {offer['role']}")
                
                # Pause entre publications
                if i < len(offers) - 1:
                    for countdown in range(30, 0, -1):
                        status_text.text(f"‚è≥ Pause de {countdown}s avant prochaine publication...")
                        time.sleep(1)
                
            except Exception as e:
                st.error(f"‚ùå Erreur publication {offer['role']}: {e}")
        
        progress_bar.progress(1.0)
        status_text.text("‚úÖ Publication termin√©e")
        
        st.markdown('<div class="success-card">', unsafe_allow_html=True)
        st.success(f"üéâ Publication termin√©e: {published_count}/{len(offers)} offres publi√©es")
        st.markdown('</div>', unsafe_allow_html=True)
    
    def run(self):
        """Lance l'application Streamlit"""
        self.render_header()
        self.render_sidebar_config()
        
        # √âtapes de l'application
        step_1_ok = self.step_1_project_analysis()
        
        if step_1_ok:
            step_2_ok = self.step_2_role_selection()
            
            if step_2_ok:
                step_3_ok = self.step_3_offer_generation()
                
                if step_3_ok:
                    self.step_4_linkedin_publishing()
        
        # Footer
        st.markdown("---")
        st.markdown("""
        <div style='text-align: center; color: #666; padding: 1rem;'>
            üöÄ G√©n√©rateur d'Offres LinkedIn ‚Ä¢ D√©velopp√© avec Streamlit
        </div>
        """, unsafe_allow_html=True)

def main():
    """Point d'entr√©e principal"""
    app = StreamlitJobOfferApp()
    app.run()

if __name__ == "__main__":
    main()